---
AWSTemplateFormatVersion: "2010-09-09"
Description: Lambda invoked by SNS

Parameters:
  # IAM
  ManagedPolicyEC2VPCNetInterface:
    Default: ""
    Type: String
    Description: IAM policy to create EC2 VPC network interface
  IAMRoleLambdaInvokedBySNS:
    Default: ""
    Type: String
    Description: IAM role for lambda function
  # Lambda functions and layers
  LambdaLayerThirdParty:
    Default: ""
    Type: String
    Description: Lambda layer containing all third-party python libraries
  LambdaLayerBucketNameKeyName:
    Default: ""
    Type: String
    Description: S3 Bucket containing lambda code in .zip format
  LambdaFuncExample:
    Default: ""
    Type: String
    Description: name of lambda function
  # Lambda VPC
  LambdaVPCSubnets:
    Default: ""
    Type: String
    Description: a comma-separated list of VPC subnet IDs
  LambdaVPCSecurityGroups:
    Default: ""
    Type: String
    Description: a comma-separated list of VPC security group IDs
  # SNS Topic
  SNSDisplayName:
    Default: ""
    Type: String
    Description: IAM policy to create EC2 VPC network interface
  SNSTopicName:
    Default: ""
    Type: String
    Description: IAM policy to create EC2 VPC network interface

Resources:
  IAMPolicy1:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      ManagedPolicyName: !Ref ManagedPolicyEC2VPCNetInterface
      Description: Lambda Invoked By SNS
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - ec2:DescribeNetworkInterfaces
              - ec2:CreateNetworkInterface
              - ec2:DeleteNetworkInterface
              - ec2:DescribeInstances
              - ec2:AttachNetworkInterface
            Effect: Allow
            Resource: !Join [":", ["arn:aws:lambda", !Ref "AWS::Region", !Ref "AWS::AccountId", "*"]]

  IAMRole1:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Ref IAMRoleLambdaInvokedBySNS
      Description: Lambda Invoked By SNS
      ManagedPolicyArns:
        - !Ref IAMPolicy1
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      AssumeRolePolicyDocument:
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
        Version: "2012-10-17"

  LambdaLayer1:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Ref LambdaLayerThirdParty
      CompatibleRuntimes: [python3.9]
      CompatibleArchitectures: [x86_64]
      Content:
        S3Bucket: !Ref LambdaLayerBucketNameKeyName
        S3Key: !Join ["", [!Ref "LambdaLayerThirdParty", ".zip"]]

  # See also: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-lambda-function.html
  LambdaFunction1:
    Type: AWS::Lambda::Function
    Properties:
      Description: Lambda With VPC access and Paramiko
      FunctionName: !Ref LambdaFuncExample
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Role: !GetAtt IAMRole1.Arn
      Runtime: python3.9
      Timeout: 60
      Environment:
        Variables:
          LICENSE: MIT
          RELEASE: 2.3.4
      Code:
        S3Bucket: !Ref LambdaLayerBucketNameKeyName
        S3Key: !Join ["", [!Ref "LambdaFuncExample", ".zip"]]
      Tags:
        - Key: env
          Value: dev
      Layers: [!Ref LambdaLayer1]
      VpcConfig:
        SecurityGroupIds: [!Ref LambdaVPCSecurityGroups]
        SubnetIds: !Split [",", !Ref LambdaVPCSubnets]

  SNSTopic1:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Ref SNSDisplayName
      FifoTopic: "false"
      Tags:
        - Key: env
          Value: staging
      TopicName: !Ref SNSTopicName

  SNSPolicy1:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Id: MyTopicPolicy
        Version: '2012-10-17'
        Statement:
          - Sid: My-statement-id
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sns:Publish
            Resource: "*"
      Topics:
        - !Ref SNSTopic1

  SNSSubscription1:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint: !GetAtt LambdaFunction1.Arn
      Protocol: "lambda"
      TopicArn: !Ref SNSTopic1

  LambdaPermission1:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt LambdaFunction1.Arn
      Principal: sns.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Ref SNSTopic1

Outputs:
  LambdaFunction:
    Value: !GetAtt LambdaFunction1.Arn
    Export:
      Name: LambdaFunction
  SNSTopic:
    Value: !Ref SNSTopic1
    Export:
      Name: SNSTopic
  SNSSubscription:
    Value: !Ref SNSSubscription1
    Export:
      Name: SNSSubscription
